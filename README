

  /----------====----------\
 [# RollCageX version ? #]
  \----------====----------/

 - a Free Software Sci-Fi Racer inspired by the original RollCage games


1) [TABLE OF CONTENTS]

1) Table of Contents
2) Licensing
3) Running
4) Default Controls
5) Configuration
6) Hardware Requirements
7) Software Requirements
   7.1) OpenGL
   7.2) SDL
   7.3) ODE
8) Compilation
9) Credits
10) Links



2) [LICENSING]

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.



3) [RUNNING]

The current version of rcx does not require installation in order to run.
Instead, just place rcx (on windows: rcx.exe) in a directory of your choice.
In the archive, there are two directories: src and data. While data is needed,
src is only needed for compilation.

Src is not needed for rcx to run - it contains the sourcecode for compilation
and modification of rcx. The data directory contains the default configuration
and all 3D models. Without the 3D files in the data directory, rcx will not
have anything to render, which is why rcx will refuse to start if these files
are missing.

A few options are available as arguments:
Path to data directory ("-d"), default: "data" in the same dir as the binary).
Path to profile directory ("-p"), default: "profiles" inside the data dir.

Example: the following uses the read only _data_ directory "/opt/rcx/data",
and a _profile_ directory the user has read/write access to (in home):
> rcx -d /opt/rcx/data -p /home/slinger/rcx



4) [DEFAULT CONTROLS]

While (almost) all input keys can be changed (data/profiles/default/keys.lst),
the following is the defaults keys for the car:

* Arrow keys for accelerating/reversing/breaking and steering
* Space for locking/drifting breaks
* Changing of camera modes using F1-F4
* For quitting the game, just press Esc.


There are also a couple of demo/debug keys (these keys can not be changed):

Camera movement/tweaking:
* A/D, W/S and Q/E - movement along X, Y and Z axes.
  Note that these buttons will be used for weapon control in future versions.

Spawning:
* F5-F8 - spawn some objects:
  box, beachball, funbox, molecule.
  Note that this function will also be removed in future versions

Debugging:
* F9  - switch car (if more than one)
* F10 - respawn car at track starting point
* F11 - simulation paus (camera can still be moved)
* F12 - wireframe geom/collision rendering toggle:
  models, models+geoms (-trimeshes), models+geoms, geoms, geoms (-trimeshes)



5) [Configuration]

RCX can be configured using a couple of plain-text files divided in several
directories inside the data directory, such as "teams", "worlds" and "profiles"

What you might be most interested in is specified in internal.conf, it
provides many ways of tweaking the performance, and also is the place where
you will be able to select resolution, full screen toggling, and eye_distance.

If you are wondering about the last one:

The viewing angle in the game is calculated based on your eye distance from
the screen, in pixels.This system got the advantage of always providing a
realistic viewing angle for all resolutions. But if you don't like this, you
can force a viewing angle in the configuration file (internal.conf).

If you want to tweak this value to your specific workstation, determine how
many pixels a normal length unit is by dividing your screen height (or width)
resolution with your physical screen height (or width). You can then multiply
the resulting value with the distance you have measured between your eyes and
screen (in reality).



6) [HARDWARE REQUIREMENTS]

The requirements for running rcx is modest, a recommended minimum would be:

* Processor:	1.5GHz, 32bit (i386)
* Memory:	32MiB RAM memory free
* Graphics:	OpenGL 1.5 or later, 16MiB video memory

Note that the memory and processor requirements also depends on OS and other
programs running at the same time as rcx. If you want to use many high detail
models, be prepared that the requirements might increase a bit.

Note: hardware opengl acceleration recommended, but of course, software
rendering is an alternative, assuming you got enough processing power.

Also, a POSIX compliant OS should be used (such as GNU or BSD). A GNU variant
is recommended (such as GNU/kfreebsd or GNU/linux). Note that Windows is not
a targeted OS, because it's not POSIX compliant and generally difficult to
use/develop on. There is however a windows compiled version of rcx (rcx.exe)
which might work.



7) [SOFTWARE REQUIREMENTS]

RCX needs OpenGL and two libraries (the compiled windows binary includes these
libraries):

   7.1) [OPENGL]
   As mentioned above, some kind of OpenGL implementation is needed for
   rendering of 3D graphics. This is OS dependent, but it is quite common
   (either hardware or software). This version requires 1.5 or later.

   7.2) [SDL]
   RCX uses the library "Simple DirectMedia Layer" for some OS independent
   functionality.

   7.3) [ODE]
   RCX uses the library "Open Dynamics Engine" for some physics simulations.



8) [COMPILING]

If you want/need to compile rcx, check if your distro provides development
libraries for ODE and SDL in separate packages and if so, install them. Also
make sure you got at least a Make program and a C++ compiler (such as GNU Make
and the GNU C++ Compiler, g++).

Then just cd into the src directory and type "make" to compile rcx.


On windows things will be more difficult: first of all, install MinGW (a
minimal port of GNU for windows - it provides compilers and standard libraries
for compilation), make sure to install make, autoconf and g++. Msys is also
recommended (as it provides a user interface to MinGW).

Then you must compile and install the SDL and ODE libraries. This procedure is
not covered here, but once you have downloaded and extracted the tarballs, use
"./configure", "make" and "make install" to install them.

Then use "make -f Makefile.doze" inside the src directory of rcx to compile a
static binary ("rcx.exe").



9) [CREDITS]

Names (and possibly alternative name on gorcx.net forum).

  * Mats Wahlberg ("Slinger")	Creator (coder) + dev 3D models
  * "XEWEASEL" ("Codie Morgan")	High Definition 3D Models
  * "K.Mac" ("Mac")		Extensive testing, hacks and new ideas
  * "MeAkaJon"			Creator/maintainer of gorcx.net webpage
  * "Spontificus"		Testing, hacks and various fixes

  Other Projects that made RCX possible:
  * "Simple DirectMedia Layer"	OS/hardware abstractions
  * "Open Dynamics Engine"	Rigid body dynamics and collision detection
  * "The GNU Project"		Its fight for computer freedom has changed the world



10) [LINKS]

* http://www.gorcx.net

